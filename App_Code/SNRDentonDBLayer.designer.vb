'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.235
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="dnn563")>  _
Partial Public Class SNRDentonDBLayerDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertNB_Store_OrderStatus(instance As NB_Store_OrderStatus)
    End Sub
  Partial Private Sub UpdateNB_Store_OrderStatus(instance As NB_Store_OrderStatus)
    End Sub
  Partial Private Sub DeleteNB_Store_OrderStatus(instance As NB_Store_OrderStatus)
    End Sub
  Partial Private Sub InsertNB_Store_Order(instance As NB_Store_Order)
    End Sub
  Partial Private Sub UpdateNB_Store_Order(instance As NB_Store_Order)
    End Sub
  Partial Private Sub DeleteNB_Store_Order(instance As NB_Store_Order)
    End Sub
  Partial Private Sub InsertNB_Store_OrderDetail(instance As NB_Store_OrderDetail)
    End Sub
  Partial Private Sub UpdateNB_Store_OrderDetail(instance As NB_Store_OrderDetail)
    End Sub
  Partial Private Sub DeleteNB_Store_OrderDetail(instance As NB_Store_OrderDetail)
    End Sub
  Partial Private Sub InsertNB_Store_Product(instance As NB_Store_Product)
    End Sub
  Partial Private Sub UpdateNB_Store_Product(instance As NB_Store_Product)
    End Sub
  Partial Private Sub DeleteNB_Store_Product(instance As NB_Store_Product)
    End Sub
  Partial Private Sub InsertNB_Store_Model(instance As NB_Store_Model)
    End Sub
  Partial Private Sub UpdateNB_Store_Model(instance As NB_Store_Model)
    End Sub
  Partial Private Sub DeleteNB_Store_Model(instance As NB_Store_Model)
    End Sub
  Partial Private Sub InsertSNR_AuditTrail(instance As SNR_AuditTrail)
    End Sub
  Partial Private Sub UpdateSNR_AuditTrail(instance As SNR_AuditTrail)
    End Sub
  Partial Private Sub DeleteSNR_AuditTrail(instance As SNR_AuditTrail)
    End Sub
  Partial Private Sub InsertNB_Store_ProductImage(instance As NB_Store_ProductImage)
    End Sub
  Partial Private Sub UpdateNB_Store_ProductImage(instance As NB_Store_ProductImage)
    End Sub
  Partial Private Sub DeleteNB_Store_ProductImage(instance As NB_Store_ProductImage)
    End Sub
  Partial Private Sub InsertNB_Store_Category(instance As NB_Store_Category)
    End Sub
  Partial Private Sub UpdateNB_Store_Category(instance As NB_Store_Category)
    End Sub
  Partial Private Sub DeleteNB_Store_Category(instance As NB_Store_Category)
    End Sub
  Partial Private Sub InsertNB_Store_CategoryLang(instance As NB_Store_CategoryLang)
    End Sub
  Partial Private Sub UpdateNB_Store_CategoryLang(instance As NB_Store_CategoryLang)
    End Sub
  Partial Private Sub DeleteNB_Store_CategoryLang(instance As NB_Store_CategoryLang)
    End Sub
  Partial Private Sub InsertNB_Store_ProductCategory(instance As NB_Store_ProductCategory)
    End Sub
  Partial Private Sub UpdateNB_Store_ProductCategory(instance As NB_Store_ProductCategory)
    End Sub
  Partial Private Sub DeleteNB_Store_ProductCategory(instance As NB_Store_ProductCategory)
    End Sub
  Partial Private Sub InsertNB_Store_ProductLang(instance As NB_Store_ProductLang)
    End Sub
  Partial Private Sub UpdateNB_Store_ProductLang(instance As NB_Store_ProductLang)
    End Sub
  Partial Private Sub DeleteNB_Store_ProductLang(instance As NB_Store_ProductLang)
    End Sub
  Partial Private Sub InsertUserPortal(instance As UserPortal)
    End Sub
  Partial Private Sub UpdateUserPortal(instance As UserPortal)
    End Sub
  Partial Private Sub DeleteUserPortal(instance As UserPortal)
    End Sub
  Partial Private Sub InsertSNR_Configuration(instance As SNR_Configuration)
    End Sub
  Partial Private Sub UpdateSNR_Configuration(instance As SNR_Configuration)
    End Sub
  Partial Private Sub DeleteSNR_Configuration(instance As SNR_Configuration)
    End Sub
  Partial Private Sub InsertSNR_Address(instance As SNR_Address)
    End Sub
  Partial Private Sub UpdateSNR_Address(instance As SNR_Address)
    End Sub
  Partial Private Sub DeleteSNR_Address(instance As SNR_Address)
    End Sub
  Partial Private Sub InsertNB_Store_Address(instance As NB_Store_Address)
    End Sub
  Partial Private Sub UpdateNB_Store_Address(instance As NB_Store_Address)
    End Sub
  Partial Private Sub DeleteNB_Store_Address(instance As NB_Store_Address)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property NB_Store_OrderStatus() As System.Data.Linq.Table(Of NB_Store_OrderStatus)
		Get
			Return Me.GetTable(Of NB_Store_OrderStatus)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_Orders() As System.Data.Linq.Table(Of NB_Store_Order)
		Get
			Return Me.GetTable(Of NB_Store_Order)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_OrderDetails() As System.Data.Linq.Table(Of NB_Store_OrderDetail)
		Get
			Return Me.GetTable(Of NB_Store_OrderDetail)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_Products() As System.Data.Linq.Table(Of NB_Store_Product)
		Get
			Return Me.GetTable(Of NB_Store_Product)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_Models() As System.Data.Linq.Table(Of NB_Store_Model)
		Get
			Return Me.GetTable(Of NB_Store_Model)
		End Get
	End Property
	
	Public ReadOnly Property SNR_AuditTrails() As System.Data.Linq.Table(Of SNR_AuditTrail)
		Get
			Return Me.GetTable(Of SNR_AuditTrail)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_ProductImages() As System.Data.Linq.Table(Of NB_Store_ProductImage)
		Get
			Return Me.GetTable(Of NB_Store_ProductImage)
		End Get
	End Property
	
	Public ReadOnly Property PortalLocalizations() As System.Data.Linq.Table(Of PortalLocalization)
		Get
			Return Me.GetTable(Of PortalLocalization)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_Categories() As System.Data.Linq.Table(Of NB_Store_Category)
		Get
			Return Me.GetTable(Of NB_Store_Category)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_CategoryLangs() As System.Data.Linq.Table(Of NB_Store_CategoryLang)
		Get
			Return Me.GetTable(Of NB_Store_CategoryLang)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_ProductCategories() As System.Data.Linq.Table(Of NB_Store_ProductCategory)
		Get
			Return Me.GetTable(Of NB_Store_ProductCategory)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_ProductLangs() As System.Data.Linq.Table(Of NB_Store_ProductLang)
		Get
			Return Me.GetTable(Of NB_Store_ProductLang)
		End Get
	End Property
	
	Public ReadOnly Property UserPortals() As System.Data.Linq.Table(Of UserPortal)
		Get
			Return Me.GetTable(Of UserPortal)
		End Get
	End Property
	
	Public ReadOnly Property SNR_Configurations() As System.Data.Linq.Table(Of SNR_Configuration)
		Get
			Return Me.GetTable(Of SNR_Configuration)
		End Get
	End Property
	
	Public ReadOnly Property SNR_Addresses() As System.Data.Linq.Table(Of SNR_Address)
		Get
			Return Me.GetTable(Of SNR_Address)
		End Get
	End Property
	
	Public ReadOnly Property NB_Store_Addresses() As System.Data.Linq.Table(Of NB_Store_Address)
		Get
			Return Me.GetTable(Of NB_Store_Address)
		End Get
	End Property
	
	Public ReadOnly Property SNR_COUNTRies() As System.Data.Linq.Table(Of SNR_COUNTRY)
		Get
			Return Me.GetTable(Of SNR_COUNTRY)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.NEvoweb_NB_Store_Address_Update")>  _
	Public Function NEvoweb_NB_Store_Address_Update( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AddressID", DbType:="Int")> ByVal addressID As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PortalID", DbType:="Int")> ByVal portalID As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="Int")> ByVal userID As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AddressDescription", DbType:="NVarChar(100)")> ByVal addressDescription As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AddressName", DbType:="NVarChar(50)")> ByVal addressName As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Address1", DbType:="NVarChar(100)")> ByVal address1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Address2", DbType:="NVarChar(100)")> ByVal address2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="City", DbType:="NVarChar(100)")> ByVal city As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RegionCode", DbType:="NVarChar(100)")> ByVal regionCode As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CountryCode", DbType:="NVarChar(100)")> ByVal countryCode As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PostalCode", DbType:="NVarChar(10)")> ByVal postalCode As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Phone1", DbType:="NVarChar(20)")> ByVal phone1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Phone2", DbType:="NVarChar(20)")> ByVal phone2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrimaryAddress", DbType:="Bit")> ByVal primaryAddress As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreatedByUser", DbType:="NVarChar(100)")> ByVal createdByUser As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreatedDate", DbType:="DateTime")> ByVal createdDate As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OrderID", DbType:="Int")> ByVal orderID As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CompanyName", DbType:="NVarChar(255)")> ByVal companyName As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Extra1", DbType:="NVarChar(255)")> ByVal extra1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Extra2", DbType:="NVarChar(255)")> ByVal extra2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Extra3", DbType:="NVarChar(255)")> ByVal extra3 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Extra4", DbType:="NVarChar(255)")> ByVal extra4 As String) As ISingleResult(Of NEvoweb_NB_Store_Address_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), addressID, portalID, userID, addressDescription, addressName, address1, address2, city, regionCode, countryCode, postalCode, phone1, phone2, primaryAddress, createdByUser, createdDate, orderID, companyName, extra1, extra2, extra3, extra4)
		Return CType(result.ReturnValue,ISingleResult(Of NEvoweb_NB_Store_Address_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SNR_DENTON_ORDER_SEARCH")>  _
	Public Function SNR_DENTON_ORDER_SEARCH(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Portal_ID", DbType:="BigInt")> ByVal portal_ID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Approve_OrderStatusID", DbType:="BigInt")> ByVal approve_OrderStatusID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AwatingFulfiment_OrderStatusID", DbType:="BigInt")> ByVal awatingFulfiment_OrderStatusID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AwatingAuthorization_OrderStatusID", DbType:="BigInt")> ByVal awatingAuthorization_OrderStatusID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cancelled_OrderStatusID", DbType:="BigInt")> ByVal cancelled_OrderStatusID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fulfilled_OrderStatusID", DbType:="BigInt")> ByVal fulfilled_OrderStatusID As System.Nullable(Of Long)) As ISingleResult(Of SNR_DENTON_ORDER_SEARCHResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), portal_ID, approve_OrderStatusID, awatingFulfiment_OrderStatusID, awatingAuthorization_OrderStatusID, cancelled_OrderStatusID, fulfilled_OrderStatusID)
		Return CType(result.ReturnValue,ISingleResult(Of SNR_DENTON_ORDER_SEARCHResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SNR_DENTON_ADDRESSBOOK_SEARCH")>  _
	Public Function SNR_DENTON_ADDRESSBOOK_SEARCH(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchCriteria", DbType:="NVarChar(100)")> ByVal searchCriteria As String) As ISingleResult(Of SNR_DENTON_ADDRESSBOOK_SEARCHResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchCriteria)
		Return CType(result.ReturnValue,ISingleResult(Of SNR_DENTON_ADDRESSBOOK_SEARCHResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_OrderStatus")>  _
Partial Public Class NB_Store_OrderStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderStatusID As Integer
	
	Private _Lang As String
	
	Private _OrderStatusText As String
	
	Private _ListOrder As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderStatusIDChanged()
    End Sub
    Partial Private Sub OnLangChanging(value As String)
    End Sub
    Partial Private Sub OnLangChanged()
    End Sub
    Partial Private Sub OnOrderStatusTextChanging(value As String)
    End Sub
    Partial Private Sub OnOrderStatusTextChanged()
    End Sub
    Partial Private Sub OnListOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnListOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderStatusID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OrderStatusID() As Integer
		Get
			Return Me._OrderStatusID
		End Get
		Set
			If ((Me._OrderStatusID = value)  _
						= false) Then
				Me.OnOrderStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderStatusID = value
				Me.SendPropertyChanged("OrderStatusID")
				Me.OnOrderStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lang", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Lang() As String
		Get
			Return Me._Lang
		End Get
		Set
			If (String.Equals(Me._Lang, value) = false) Then
				Me.OnLangChanging(value)
				Me.SendPropertyChanging
				Me._Lang = value
				Me.SendPropertyChanged("Lang")
				Me.OnLangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderStatusText", DbType:="NVarChar(50)")>  _
	Public Property OrderStatusText() As String
		Get
			Return Me._OrderStatusText
		End Get
		Set
			If (String.Equals(Me._OrderStatusText, value) = false) Then
				Me.OnOrderStatusTextChanging(value)
				Me.SendPropertyChanging
				Me._OrderStatusText = value
				Me.SendPropertyChanged("OrderStatusText")
				Me.OnOrderStatusTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListOrder", DbType:="Int")>  _
	Public Property ListOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ListOrder
		End Get
		Set
			If (Me._ListOrder.Equals(value) = false) Then
				Me.OnListOrderChanging(value)
				Me.SendPropertyChanging
				Me._ListOrder = value
				Me.SendPropertyChanged("ListOrder")
				Me.OnListOrderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_Orders")>  _
Partial Public Class NB_Store_Order
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderID As Integer
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _PortalID As Integer
	
	Private _OrderNumber As String
	
	Private _OrderDate As System.Nullable(Of Date)
	
	Private _ShipDate As System.Nullable(Of Date)
	
	Private _ShippingAddressID As System.Nullable(Of Integer)
	
	Private _BillingAddressID As System.Nullable(Of Integer)
	
	Private _AppliedTax As System.Nullable(Of Decimal)
	
	Private _ShippingCost As System.Nullable(Of Decimal)
	
	Private _OrderIsPlaced As System.Nullable(Of Boolean)
	
	Private _OrderStatusID As System.Nullable(Of Integer)
	
	Private _PayType As String
	
	Private _CalculatedTax As System.Nullable(Of Decimal)
	
	Private _NoteMsg As String
	
	Private _VATNumber As String
	
	Private _Discount As System.Nullable(Of Decimal)
	
	Private _PromoCode As String
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _Email As String
	
	Private _BankAuthCode As String
	
	Private _ShipMethodID As System.Nullable(Of Integer)
	
	Private _TrackingCode As String
	
	Private _Stg2FormXML As System.Xml.Linq.XElement
	
	Private _Stg3FormXML As System.Xml.Linq.XElement
	
	Private _AlreadyPaid As Decimal
	
	Private _OrderGUID As String
	
	Private _ElapsedDate As System.Nullable(Of Date)
	
	Private _GatewayProvider As String
	
	Private _CartXMLInfo As System.Xml.Linq.XElement
	
	Private _NB_Store_OrderDetails As EntitySet(Of NB_Store_OrderDetail)
	
	Private _NB_Store_Addresses As EntitySet(Of NB_Store_Address)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnOrderNumberChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnShippingAddressIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShippingAddressIDChanged()
    End Sub
    Partial Private Sub OnBillingAddressIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBillingAddressIDChanged()
    End Sub
    Partial Private Sub OnAppliedTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAppliedTaxChanged()
    End Sub
    Partial Private Sub OnShippingCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnShippingCostChanged()
    End Sub
    Partial Private Sub OnOrderIsPlacedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOrderIsPlacedChanged()
    End Sub
    Partial Private Sub OnOrderStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderStatusIDChanged()
    End Sub
    Partial Private Sub OnPayTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPayTypeChanged()
    End Sub
    Partial Private Sub OnCalculatedTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCalculatedTaxChanged()
    End Sub
    Partial Private Sub OnNoteMsgChanging(value As String)
    End Sub
    Partial Private Sub OnNoteMsgChanged()
    End Sub
    Partial Private Sub OnVATNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVATNumberChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnPromoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPromoCodeChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnBankAuthCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBankAuthCodeChanged()
    End Sub
    Partial Private Sub OnShipMethodIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShipMethodIDChanged()
    End Sub
    Partial Private Sub OnTrackingCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTrackingCodeChanged()
    End Sub
    Partial Private Sub OnStg2FormXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnStg2FormXMLChanged()
    End Sub
    Partial Private Sub OnStg3FormXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnStg3FormXMLChanged()
    End Sub
    Partial Private Sub OnAlreadyPaidChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAlreadyPaidChanged()
    End Sub
    Partial Private Sub OnOrderGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnOrderGUIDChanged()
    End Sub
    Partial Private Sub OnElapsedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnElapsedDateChanged()
    End Sub
    Partial Private Sub OnGatewayProviderChanging(value As String)
    End Sub
    Partial Private Sub OnGatewayProviderChanged()
    End Sub
    Partial Private Sub OnCartXMLInfoChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCartXMLInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_OrderDetails = New EntitySet(Of NB_Store_OrderDetail)(AddressOf Me.attach_NB_Store_OrderDetails, AddressOf Me.detach_NB_Store_OrderDetails)
		Me._NB_Store_Addresses = New EntitySet(Of NB_Store_Address)(AddressOf Me.attach_NB_Store_Addresses, AddressOf Me.detach_NB_Store_Addresses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderNumber", DbType:="NVarChar(50)")>  _
	Public Property OrderNumber() As String
		Get
			Return Me._OrderNumber
		End Get
		Set
			If (String.Equals(Me._OrderNumber, value) = false) Then
				Me.OnOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._OrderNumber = value
				Me.SendPropertyChanged("OrderNumber")
				Me.OnOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>  _
	Public Property OrderDate() As System.Nullable(Of Date)
		Get
			Return Me._OrderDate
		End Get
		Set
			If (Me._OrderDate.Equals(value) = false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>  _
	Public Property ShipDate() As System.Nullable(Of Date)
		Get
			Return Me._ShipDate
		End Get
		Set
			If (Me._ShipDate.Equals(value) = false) Then
				Me.OnShipDateChanging(value)
				Me.SendPropertyChanging
				Me._ShipDate = value
				Me.SendPropertyChanged("ShipDate")
				Me.OnShipDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingAddressID", DbType:="Int")>  _
	Public Property ShippingAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._ShippingAddressID
		End Get
		Set
			If (Me._ShippingAddressID.Equals(value) = false) Then
				Me.OnShippingAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._ShippingAddressID = value
				Me.SendPropertyChanged("ShippingAddressID")
				Me.OnShippingAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingAddressID", DbType:="Int")>  _
	Public Property BillingAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._BillingAddressID
		End Get
		Set
			If (Me._BillingAddressID.Equals(value) = false) Then
				Me.OnBillingAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._BillingAddressID = value
				Me.SendPropertyChanged("BillingAddressID")
				Me.OnBillingAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppliedTax", DbType:="Money")>  _
	Public Property AppliedTax() As System.Nullable(Of Decimal)
		Get
			Return Me._AppliedTax
		End Get
		Set
			If (Me._AppliedTax.Equals(value) = false) Then
				Me.OnAppliedTaxChanging(value)
				Me.SendPropertyChanging
				Me._AppliedTax = value
				Me.SendPropertyChanged("AppliedTax")
				Me.OnAppliedTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingCost", DbType:="Money")>  _
	Public Property ShippingCost() As System.Nullable(Of Decimal)
		Get
			Return Me._ShippingCost
		End Get
		Set
			If (Me._ShippingCost.Equals(value) = false) Then
				Me.OnShippingCostChanging(value)
				Me.SendPropertyChanging
				Me._ShippingCost = value
				Me.SendPropertyChanged("ShippingCost")
				Me.OnShippingCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderIsPlaced", DbType:="Bit")>  _
	Public Property OrderIsPlaced() As System.Nullable(Of Boolean)
		Get
			Return Me._OrderIsPlaced
		End Get
		Set
			If (Me._OrderIsPlaced.Equals(value) = false) Then
				Me.OnOrderIsPlacedChanging(value)
				Me.SendPropertyChanging
				Me._OrderIsPlaced = value
				Me.SendPropertyChanged("OrderIsPlaced")
				Me.OnOrderIsPlacedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderStatusID", DbType:="Int")>  _
	Public Property OrderStatusID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderStatusID
		End Get
		Set
			If (Me._OrderStatusID.Equals(value) = false) Then
				Me.OnOrderStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderStatusID = value
				Me.SendPropertyChanged("OrderStatusID")
				Me.OnOrderStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PayType", DbType:="NVarChar(20)")>  _
	Public Property PayType() As String
		Get
			Return Me._PayType
		End Get
		Set
			If (String.Equals(Me._PayType, value) = false) Then
				Me.OnPayTypeChanging(value)
				Me.SendPropertyChanging
				Me._PayType = value
				Me.SendPropertyChanged("PayType")
				Me.OnPayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalculatedTax", DbType:="Money")>  _
	Public Property CalculatedTax() As System.Nullable(Of Decimal)
		Get
			Return Me._CalculatedTax
		End Get
		Set
			If (Me._CalculatedTax.Equals(value) = false) Then
				Me.OnCalculatedTaxChanging(value)
				Me.SendPropertyChanging
				Me._CalculatedTax = value
				Me.SendPropertyChanged("CalculatedTax")
				Me.OnCalculatedTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoteMsg", DbType:="NVarChar(500)")>  _
	Public Property NoteMsg() As String
		Get
			Return Me._NoteMsg
		End Get
		Set
			If (String.Equals(Me._NoteMsg, value) = false) Then
				Me.OnNoteMsgChanging(value)
				Me.SendPropertyChanging
				Me._NoteMsg = value
				Me.SendPropertyChanged("NoteMsg")
				Me.OnNoteMsgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATNumber", DbType:="NVarChar(30)")>  _
	Public Property VATNumber() As String
		Get
			Return Me._VATNumber
		End Get
		Set
			If (String.Equals(Me._VATNumber, value) = false) Then
				Me.OnVATNumberChanging(value)
				Me.SendPropertyChanging
				Me._VATNumber = value
				Me.SendPropertyChanged("VATNumber")
				Me.OnVATNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Money")>  _
	Public Property Discount() As System.Nullable(Of Decimal)
		Get
			Return Me._Discount
		End Get
		Set
			If (Me._Discount.Equals(value) = false) Then
				Me.OnDiscountChanging(value)
				Me.SendPropertyChanging
				Me._Discount = value
				Me.SendPropertyChanged("Discount")
				Me.OnDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoCode", DbType:="NVarChar(20)")>  _
	Public Property PromoCode() As String
		Get
			Return Me._PromoCode
		End Get
		Set
			If (String.Equals(Me._PromoCode, value) = false) Then
				Me.OnPromoCodeChanging(value)
				Me.SendPropertyChanging
				Me._PromoCode = value
				Me.SendPropertyChanged("PromoCode")
				Me.OnPromoCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Money")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAuthCode", DbType:="NVarChar(50)")>  _
	Public Property BankAuthCode() As String
		Get
			Return Me._BankAuthCode
		End Get
		Set
			If (String.Equals(Me._BankAuthCode, value) = false) Then
				Me.OnBankAuthCodeChanging(value)
				Me.SendPropertyChanging
				Me._BankAuthCode = value
				Me.SendPropertyChanged("BankAuthCode")
				Me.OnBankAuthCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipMethodID", DbType:="Int")>  _
	Public Property ShipMethodID() As System.Nullable(Of Integer)
		Get
			Return Me._ShipMethodID
		End Get
		Set
			If (Me._ShipMethodID.Equals(value) = false) Then
				Me.OnShipMethodIDChanging(value)
				Me.SendPropertyChanging
				Me._ShipMethodID = value
				Me.SendPropertyChanged("ShipMethodID")
				Me.OnShipMethodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackingCode", DbType:="NVarChar(50)")>  _
	Public Property TrackingCode() As String
		Get
			Return Me._TrackingCode
		End Get
		Set
			If (String.Equals(Me._TrackingCode, value) = false) Then
				Me.OnTrackingCodeChanging(value)
				Me.SendPropertyChanging
				Me._TrackingCode = value
				Me.SendPropertyChanged("TrackingCode")
				Me.OnTrackingCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stg2FormXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Stg2FormXML() As System.Xml.Linq.XElement
		Get
			Return Me._Stg2FormXML
		End Get
		Set
			If (Object.Equals(Me._Stg2FormXML, value) = false) Then
				Me.OnStg2FormXMLChanging(value)
				Me.SendPropertyChanging
				Me._Stg2FormXML = value
				Me.SendPropertyChanged("Stg2FormXML")
				Me.OnStg2FormXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stg3FormXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Stg3FormXML() As System.Xml.Linq.XElement
		Get
			Return Me._Stg3FormXML
		End Get
		Set
			If (Object.Equals(Me._Stg3FormXML, value) = false) Then
				Me.OnStg3FormXMLChanging(value)
				Me.SendPropertyChanging
				Me._Stg3FormXML = value
				Me.SendPropertyChanged("Stg3FormXML")
				Me.OnStg3FormXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlreadyPaid", DbType:="Money NOT NULL")>  _
	Public Property AlreadyPaid() As Decimal
		Get
			Return Me._AlreadyPaid
		End Get
		Set
			If ((Me._AlreadyPaid = value)  _
						= false) Then
				Me.OnAlreadyPaidChanging(value)
				Me.SendPropertyChanging
				Me._AlreadyPaid = value
				Me.SendPropertyChanged("AlreadyPaid")
				Me.OnAlreadyPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderGUID", DbType:="NVarChar(50)")>  _
	Public Property OrderGUID() As String
		Get
			Return Me._OrderGUID
		End Get
		Set
			If (String.Equals(Me._OrderGUID, value) = false) Then
				Me.OnOrderGUIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderGUID = value
				Me.SendPropertyChanged("OrderGUID")
				Me.OnOrderGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ElapsedDate", DbType:="DateTime")>  _
	Public Property ElapsedDate() As System.Nullable(Of Date)
		Get
			Return Me._ElapsedDate
		End Get
		Set
			If (Me._ElapsedDate.Equals(value) = false) Then
				Me.OnElapsedDateChanging(value)
				Me.SendPropertyChanging
				Me._ElapsedDate = value
				Me.SendPropertyChanged("ElapsedDate")
				Me.OnElapsedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GatewayProvider", DbType:="NVarChar(100)")>  _
	Public Property GatewayProvider() As String
		Get
			Return Me._GatewayProvider
		End Get
		Set
			If (String.Equals(Me._GatewayProvider, value) = false) Then
				Me.OnGatewayProviderChanging(value)
				Me.SendPropertyChanging
				Me._GatewayProvider = value
				Me.SendPropertyChanged("GatewayProvider")
				Me.OnGatewayProviderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartXMLInfo", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CartXMLInfo() As System.Xml.Linq.XElement
		Get
			Return Me._CartXMLInfo
		End Get
		Set
			If (Object.Equals(Me._CartXMLInfo, value) = false) Then
				Me.OnCartXMLInfoChanging(value)
				Me.SendPropertyChanging
				Me._CartXMLInfo = value
				Me.SendPropertyChanged("CartXMLInfo")
				Me.OnCartXMLInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Order_NB_Store_OrderDetail", Storage:="_NB_Store_OrderDetails", ThisKey:="OrderID", OtherKey:="OrderID")>  _
	Public Property NB_Store_OrderDetails() As EntitySet(Of NB_Store_OrderDetail)
		Get
			Return Me._NB_Store_OrderDetails
		End Get
		Set
			Me._NB_Store_OrderDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Order_NB_Store_Address", Storage:="_NB_Store_Addresses", ThisKey:="OrderID", OtherKey:="OrderID")>  _
	Public Property NB_Store_Addresses() As EntitySet(Of NB_Store_Address)
		Get
			Return Me._NB_Store_Addresses
		End Get
		Set
			Me._NB_Store_Addresses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NB_Store_OrderDetails(ByVal entity As NB_Store_OrderDetail)
		Me.SendPropertyChanging
		entity.NB_Store_Order = Me
	End Sub
	
	Private Sub detach_NB_Store_OrderDetails(ByVal entity As NB_Store_OrderDetail)
		Me.SendPropertyChanging
		entity.NB_Store_Order = Nothing
	End Sub
	
	Private Sub attach_NB_Store_Addresses(ByVal entity As NB_Store_Address)
		Me.SendPropertyChanging
		entity.NB_Store_Order = Me
	End Sub
	
	Private Sub detach_NB_Store_Addresses(ByVal entity As NB_Store_Address)
		Me.SendPropertyChanging
		entity.NB_Store_Order = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_OrderDetails")>  _
Partial Public Class NB_Store_OrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderDetailID As Integer
	
	Private _OrderID As Integer
	
	Private _Quantity As Integer
	
	Private _UnitCost As Decimal
	
	Private _ModelID As System.Nullable(Of Integer)
	
	Private _OptCode As String
	
	Private _ItemDesc As String
	
	Private _Discount As System.Nullable(Of Decimal)
	
	Private _Tax As System.Nullable(Of Decimal)
	
	Private _ProductURL As String
	
	Private _PurchaseCost As Decimal
	
	Private _CartXMLInfo As System.Xml.Linq.XElement
	
	Private _NB_Store_Order As EntityRef(Of NB_Store_Order)
	
	Private _NB_Store_Model As EntityRef(Of NB_Store_Model)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnUnitCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitCostChanged()
    End Sub
    Partial Private Sub OnModelIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModelIDChanged()
    End Sub
    Partial Private Sub OnOptCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOptCodeChanged()
    End Sub
    Partial Private Sub OnItemDescChanging(value As String)
    End Sub
    Partial Private Sub OnItemDescChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTaxChanged()
    End Sub
    Partial Private Sub OnProductURLChanging(value As String)
    End Sub
    Partial Private Sub OnProductURLChanged()
    End Sub
    Partial Private Sub OnPurchaseCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPurchaseCostChanged()
    End Sub
    Partial Private Sub OnCartXMLInfoChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCartXMLInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Order = CType(Nothing, EntityRef(Of NB_Store_Order))
		Me._NB_Store_Model = CType(Nothing, EntityRef(Of NB_Store_Model))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OrderDetailID() As Integer
		Get
			Return Me._OrderDetailID
		End Get
		Set
			If ((Me._OrderDetailID = value)  _
						= false) Then
				Me.OnOrderDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderDetailID = value
				Me.SendPropertyChanged("OrderDetailID")
				Me.OnOrderDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				If Me._NB_Store_Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
	Public Property Quantity() As Integer
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitCost", DbType:="Money NOT NULL")>  _
	Public Property UnitCost() As Decimal
		Get
			Return Me._UnitCost
		End Get
		Set
			If ((Me._UnitCost = value)  _
						= false) Then
				Me.OnUnitCostChanging(value)
				Me.SendPropertyChanging
				Me._UnitCost = value
				Me.SendPropertyChanged("UnitCost")
				Me.OnUnitCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelID", DbType:="Int")>  _
	Public Property ModelID() As System.Nullable(Of Integer)
		Get
			Return Me._ModelID
		End Get
		Set
			If (Me._ModelID.Equals(value) = false) Then
				If Me._NB_Store_Model.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnModelIDChanging(value)
				Me.SendPropertyChanging
				Me._ModelID = value
				Me.SendPropertyChanged("ModelID")
				Me.OnModelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptCode", DbType:="NVarChar(50)")>  _
	Public Property OptCode() As String
		Get
			Return Me._OptCode
		End Get
		Set
			If (String.Equals(Me._OptCode, value) = false) Then
				Me.OnOptCodeChanging(value)
				Me.SendPropertyChanging
				Me._OptCode = value
				Me.SendPropertyChanged("OptCode")
				Me.OnOptCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemDesc", DbType:="NVarChar(4000)")>  _
	Public Property ItemDesc() As String
		Get
			Return Me._ItemDesc
		End Get
		Set
			If (String.Equals(Me._ItemDesc, value) = false) Then
				Me.OnItemDescChanging(value)
				Me.SendPropertyChanging
				Me._ItemDesc = value
				Me.SendPropertyChanged("ItemDesc")
				Me.OnItemDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Money")>  _
	Public Property Discount() As System.Nullable(Of Decimal)
		Get
			Return Me._Discount
		End Get
		Set
			If (Me._Discount.Equals(value) = false) Then
				Me.OnDiscountChanging(value)
				Me.SendPropertyChanging
				Me._Discount = value
				Me.SendPropertyChanged("Discount")
				Me.OnDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tax", DbType:="Money")>  _
	Public Property Tax() As System.Nullable(Of Decimal)
		Get
			Return Me._Tax
		End Get
		Set
			If (Me._Tax.Equals(value) = false) Then
				Me.OnTaxChanging(value)
				Me.SendPropertyChanging
				Me._Tax = value
				Me.SendPropertyChanged("Tax")
				Me.OnTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductURL", DbType:="NVarChar(256)")>  _
	Public Property ProductURL() As String
		Get
			Return Me._ProductURL
		End Get
		Set
			If (String.Equals(Me._ProductURL, value) = false) Then
				Me.OnProductURLChanging(value)
				Me.SendPropertyChanging
				Me._ProductURL = value
				Me.SendPropertyChanged("ProductURL")
				Me.OnProductURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseCost", DbType:="Money NOT NULL")>  _
	Public Property PurchaseCost() As Decimal
		Get
			Return Me._PurchaseCost
		End Get
		Set
			If ((Me._PurchaseCost = value)  _
						= false) Then
				Me.OnPurchaseCostChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseCost = value
				Me.SendPropertyChanged("PurchaseCost")
				Me.OnPurchaseCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartXMLInfo", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CartXMLInfo() As System.Xml.Linq.XElement
		Get
			Return Me._CartXMLInfo
		End Get
		Set
			If (Object.Equals(Me._CartXMLInfo, value) = false) Then
				Me.OnCartXMLInfoChanging(value)
				Me.SendPropertyChanging
				Me._CartXMLInfo = value
				Me.SendPropertyChanged("CartXMLInfo")
				Me.OnCartXMLInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Order_NB_Store_OrderDetail", Storage:="_NB_Store_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Order() As NB_Store_Order
		Get
			Return Me._NB_Store_Order.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Order = Me._NB_Store_Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Order.Entity = Nothing
					previousValue.NB_Store_OrderDetails.Remove(Me)
				End If
				Me._NB_Store_Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_OrderDetails.Add(Me)
					Me._OrderID = value.OrderID
				Else
					Me._OrderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NB_Store_Order")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Model_NB_Store_OrderDetail", Storage:="_NB_Store_Model", ThisKey:="ModelID", OtherKey:="ModelID", IsForeignKey:=true)>  _
	Public Property NB_Store_Model() As NB_Store_Model
		Get
			Return Me._NB_Store_Model.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Model = Me._NB_Store_Model.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Model.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Model.Entity = Nothing
					previousValue.NB_Store_OrderDetails.Remove(Me)
				End If
				Me._NB_Store_Model.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_OrderDetails.Add(Me)
					Me._ModelID = value.ModelID
				Else
					Me._ModelID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NB_Store_Model")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_Products")>  _
Partial Public Class NB_Store_Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _PortalID As Integer
	
	Private _TaxCategoryID As Integer
	
	Private _Featured As Boolean
	
	Private _Archived As Boolean
	
	Private _CreatedByUser As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _IsDeleted As Boolean
	
	Private _ProductRef As String
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _IsHidden As Boolean
	
	Private _NB_Store_Models As EntitySet(Of NB_Store_Model)
	
	Private _NB_Store_ProductImages As EntitySet(Of NB_Store_ProductImage)
	
	Private _NB_Store_ProductCategories As EntitySet(Of NB_Store_ProductCategory)
	
	Private _NB_Store_ProductLangs As EntitySet(Of NB_Store_ProductLang)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnTaxCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTaxCategoryIDChanged()
    End Sub
    Partial Private Sub OnFeaturedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFeaturedChanged()
    End Sub
    Partial Private Sub OnArchivedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnArchivedChanged()
    End Sub
    Partial Private Sub OnCreatedByUserChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByUserChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnProductRefChanging(value As String)
    End Sub
    Partial Private Sub OnProductRefChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OnIsHiddenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHiddenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Models = New EntitySet(Of NB_Store_Model)(AddressOf Me.attach_NB_Store_Models, AddressOf Me.detach_NB_Store_Models)
		Me._NB_Store_ProductImages = New EntitySet(Of NB_Store_ProductImage)(AddressOf Me.attach_NB_Store_ProductImages, AddressOf Me.detach_NB_Store_ProductImages)
		Me._NB_Store_ProductCategories = New EntitySet(Of NB_Store_ProductCategory)(AddressOf Me.attach_NB_Store_ProductCategories, AddressOf Me.detach_NB_Store_ProductCategories)
		Me._NB_Store_ProductLangs = New EntitySet(Of NB_Store_ProductLang)(AddressOf Me.attach_NB_Store_ProductLangs, AddressOf Me.detach_NB_Store_ProductLangs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCategoryID", DbType:="Int NOT NULL")>  _
	Public Property TaxCategoryID() As Integer
		Get
			Return Me._TaxCategoryID
		End Get
		Set
			If ((Me._TaxCategoryID = value)  _
						= false) Then
				Me.OnTaxCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._TaxCategoryID = value
				Me.SendPropertyChanged("TaxCategoryID")
				Me.OnTaxCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Featured", DbType:="Bit NOT NULL")>  _
	Public Property Featured() As Boolean
		Get
			Return Me._Featured
		End Get
		Set
			If ((Me._Featured = value)  _
						= false) Then
				Me.OnFeaturedChanging(value)
				Me.SendPropertyChanging
				Me._Featured = value
				Me.SendPropertyChanged("Featured")
				Me.OnFeaturedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Archived", DbType:="Bit NOT NULL")>  _
	Public Property Archived() As Boolean
		Get
			Return Me._Archived
		End Get
		Set
			If ((Me._Archived = value)  _
						= false) Then
				Me.OnArchivedChanging(value)
				Me.SendPropertyChanging
				Me._Archived = value
				Me.SendPropertyChanged("Archived")
				Me.OnArchivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUser", DbType:="NVarChar(100)")>  _
	Public Property CreatedByUser() As String
		Get
			Return Me._CreatedByUser
		End Get
		Set
			If (String.Equals(Me._CreatedByUser, value) = false) Then
				Me.OnCreatedByUserChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUser = value
				Me.SendPropertyChanged("CreatedByUser")
				Me.OnCreatedByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductRef", DbType:="NVarChar(20)")>  _
	Public Property ProductRef() As String
		Get
			Return Me._ProductRef
		End Get
		Set
			If (String.Equals(Me._ProductRef, value) = false) Then
				Me.OnProductRefChanging(value)
				Me.SendPropertyChanging
				Me._ProductRef = value
				Me.SendPropertyChanged("ProductRef")
				Me.OnProductRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHidden", DbType:="Bit NOT NULL")>  _
	Public Property IsHidden() As Boolean
		Get
			Return Me._IsHidden
		End Get
		Set
			If ((Me._IsHidden = value)  _
						= false) Then
				Me.OnIsHiddenChanging(value)
				Me.SendPropertyChanging
				Me._IsHidden = value
				Me.SendPropertyChanged("IsHidden")
				Me.OnIsHiddenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_Model", Storage:="_NB_Store_Models", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property NB_Store_Models() As EntitySet(Of NB_Store_Model)
		Get
			Return Me._NB_Store_Models
		End Get
		Set
			Me._NB_Store_Models.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductImage", Storage:="_NB_Store_ProductImages", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property NB_Store_ProductImages() As EntitySet(Of NB_Store_ProductImage)
		Get
			Return Me._NB_Store_ProductImages
		End Get
		Set
			Me._NB_Store_ProductImages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductCategory", Storage:="_NB_Store_ProductCategories", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property NB_Store_ProductCategories() As EntitySet(Of NB_Store_ProductCategory)
		Get
			Return Me._NB_Store_ProductCategories
		End Get
		Set
			Me._NB_Store_ProductCategories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductLang", Storage:="_NB_Store_ProductLangs", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property NB_Store_ProductLangs() As EntitySet(Of NB_Store_ProductLang)
		Get
			Return Me._NB_Store_ProductLangs
		End Get
		Set
			Me._NB_Store_ProductLangs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NB_Store_Models(ByVal entity As NB_Store_Model)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Me
	End Sub
	
	Private Sub detach_NB_Store_Models(ByVal entity As NB_Store_Model)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Nothing
	End Sub
	
	Private Sub attach_NB_Store_ProductImages(ByVal entity As NB_Store_ProductImage)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Me
	End Sub
	
	Private Sub detach_NB_Store_ProductImages(ByVal entity As NB_Store_ProductImage)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Nothing
	End Sub
	
	Private Sub attach_NB_Store_ProductCategories(ByVal entity As NB_Store_ProductCategory)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Me
	End Sub
	
	Private Sub detach_NB_Store_ProductCategories(ByVal entity As NB_Store_ProductCategory)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Nothing
	End Sub
	
	Private Sub attach_NB_Store_ProductLangs(ByVal entity As NB_Store_ProductLang)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Me
	End Sub
	
	Private Sub detach_NB_Store_ProductLangs(ByVal entity As NB_Store_ProductLang)
		Me.SendPropertyChanging
		entity.NB_Store_Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_Model")>  _
Partial Public Class NB_Store_Model
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModelID As Integer
	
	Private _ProductID As System.Nullable(Of Integer)
	
	Private _ListOrder As System.Nullable(Of Integer)
	
	Private _UnitCost As System.Nullable(Of Decimal)
	
	Private _Barcode As String
	
	Private _ModelRef As String
	
	Private _QtyRemaining As System.Nullable(Of Integer)
	
	Private _QtyTrans As System.Nullable(Of Integer)
	
	Private _QtyTransDate As System.Nullable(Of Date)
	
	Private _Deleted As System.Nullable(Of Boolean)
	
	Private _QtyStockSet As System.Nullable(Of Integer)
	
	Private _DealerCost As System.Nullable(Of Decimal)
	
	Private _PurchaseCost As System.Nullable(Of Decimal)
	
	Private _DealerOnly As System.Nullable(Of Boolean)
	
	Private _Allow As Integer
	
	Private _NB_Store_OrderDetails As EntitySet(Of NB_Store_OrderDetail)
	
	Private _NB_Store_Product As EntityRef(Of NB_Store_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModelIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnModelIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnListOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnListOrderChanged()
    End Sub
    Partial Private Sub OnUnitCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitCostChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As String)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnModelRefChanging(value As String)
    End Sub
    Partial Private Sub OnModelRefChanged()
    End Sub
    Partial Private Sub OnQtyRemainingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtyRemainingChanged()
    End Sub
    Partial Private Sub OnQtyTransChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtyTransChanged()
    End Sub
    Partial Private Sub OnQtyTransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnQtyTransDateChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    Partial Private Sub OnQtyStockSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtyStockSetChanged()
    End Sub
    Partial Private Sub OnDealerCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDealerCostChanged()
    End Sub
    Partial Private Sub OnPurchaseCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPurchaseCostChanged()
    End Sub
    Partial Private Sub OnDealerOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDealerOnlyChanged()
    End Sub
    Partial Private Sub OnAllowChanging(value As Integer)
    End Sub
    Partial Private Sub OnAllowChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_OrderDetails = New EntitySet(Of NB_Store_OrderDetail)(AddressOf Me.attach_NB_Store_OrderDetails, AddressOf Me.detach_NB_Store_OrderDetails)
		Me._NB_Store_Product = CType(Nothing, EntityRef(Of NB_Store_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ModelID() As Integer
		Get
			Return Me._ModelID
		End Get
		Set
			If ((Me._ModelID = value)  _
						= false) Then
				Me.OnModelIDChanging(value)
				Me.SendPropertyChanging
				Me._ModelID = value
				Me.SendPropertyChanged("ModelID")
				Me.OnModelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int")>  _
	Public Property ProductID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._NB_Store_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListOrder", DbType:="Int")>  _
	Public Property ListOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ListOrder
		End Get
		Set
			If (Me._ListOrder.Equals(value) = false) Then
				Me.OnListOrderChanging(value)
				Me.SendPropertyChanging
				Me._ListOrder = value
				Me.SendPropertyChanged("ListOrder")
				Me.OnListOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitCost", DbType:="Money")>  _
	Public Property UnitCost() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitCost
		End Get
		Set
			If (Me._UnitCost.Equals(value) = false) Then
				Me.OnUnitCostChanging(value)
				Me.SendPropertyChanging
				Me._UnitCost = value
				Me.SendPropertyChanged("UnitCost")
				Me.OnUnitCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="NVarChar(20)")>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelRef", DbType:="NVarChar(20)")>  _
	Public Property ModelRef() As String
		Get
			Return Me._ModelRef
		End Get
		Set
			If (String.Equals(Me._ModelRef, value) = false) Then
				Me.OnModelRefChanging(value)
				Me.SendPropertyChanging
				Me._ModelRef = value
				Me.SendPropertyChanged("ModelRef")
				Me.OnModelRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyRemaining", DbType:="Int")>  _
	Public Property QtyRemaining() As System.Nullable(Of Integer)
		Get
			Return Me._QtyRemaining
		End Get
		Set
			If (Me._QtyRemaining.Equals(value) = false) Then
				Me.OnQtyRemainingChanging(value)
				Me.SendPropertyChanging
				Me._QtyRemaining = value
				Me.SendPropertyChanged("QtyRemaining")
				Me.OnQtyRemainingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyTrans", DbType:="Int")>  _
	Public Property QtyTrans() As System.Nullable(Of Integer)
		Get
			Return Me._QtyTrans
		End Get
		Set
			If (Me._QtyTrans.Equals(value) = false) Then
				Me.OnQtyTransChanging(value)
				Me.SendPropertyChanging
				Me._QtyTrans = value
				Me.SendPropertyChanged("QtyTrans")
				Me.OnQtyTransChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyTransDate", DbType:="DateTime")>  _
	Public Property QtyTransDate() As System.Nullable(Of Date)
		Get
			Return Me._QtyTransDate
		End Get
		Set
			If (Me._QtyTransDate.Equals(value) = false) Then
				Me.OnQtyTransDateChanging(value)
				Me.SendPropertyChanging
				Me._QtyTransDate = value
				Me.SendPropertyChanged("QtyTransDate")
				Me.OnQtyTransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit")>  _
	Public Property Deleted() As System.Nullable(Of Boolean)
		Get
			Return Me._Deleted
		End Get
		Set
			If (Me._Deleted.Equals(value) = false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyStockSet", DbType:="Int")>  _
	Public Property QtyStockSet() As System.Nullable(Of Integer)
		Get
			Return Me._QtyStockSet
		End Get
		Set
			If (Me._QtyStockSet.Equals(value) = false) Then
				Me.OnQtyStockSetChanging(value)
				Me.SendPropertyChanging
				Me._QtyStockSet = value
				Me.SendPropertyChanged("QtyStockSet")
				Me.OnQtyStockSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerCost", DbType:="Money")>  _
	Public Property DealerCost() As System.Nullable(Of Decimal)
		Get
			Return Me._DealerCost
		End Get
		Set
			If (Me._DealerCost.Equals(value) = false) Then
				Me.OnDealerCostChanging(value)
				Me.SendPropertyChanging
				Me._DealerCost = value
				Me.SendPropertyChanged("DealerCost")
				Me.OnDealerCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseCost", DbType:="Money")>  _
	Public Property PurchaseCost() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchaseCost
		End Get
		Set
			If (Me._PurchaseCost.Equals(value) = false) Then
				Me.OnPurchaseCostChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseCost = value
				Me.SendPropertyChanged("PurchaseCost")
				Me.OnPurchaseCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerOnly", DbType:="Bit")>  _
	Public Property DealerOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._DealerOnly
		End Get
		Set
			If (Me._DealerOnly.Equals(value) = false) Then
				Me.OnDealerOnlyChanging(value)
				Me.SendPropertyChanging
				Me._DealerOnly = value
				Me.SendPropertyChanged("DealerOnly")
				Me.OnDealerOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allow", DbType:="Int NOT NULL")>  _
	Public Property Allow() As Integer
		Get
			Return Me._Allow
		End Get
		Set
			If ((Me._Allow = value)  _
						= false) Then
				Me.OnAllowChanging(value)
				Me.SendPropertyChanging
				Me._Allow = value
				Me.SendPropertyChanged("Allow")
				Me.OnAllowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Model_NB_Store_OrderDetail", Storage:="_NB_Store_OrderDetails", ThisKey:="ModelID", OtherKey:="ModelID")>  _
	Public Property NB_Store_OrderDetails() As EntitySet(Of NB_Store_OrderDetail)
		Get
			Return Me._NB_Store_OrderDetails
		End Get
		Set
			Me._NB_Store_OrderDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_Model", Storage:="_NB_Store_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Product() As NB_Store_Product
		Get
			Return Me._NB_Store_Product.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Product = Me._NB_Store_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Product.Entity = Nothing
					previousValue.NB_Store_Models.Remove(Me)
				End If
				Me._NB_Store_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_Models.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NB_Store_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NB_Store_OrderDetails(ByVal entity As NB_Store_OrderDetail)
		Me.SendPropertyChanging
		entity.NB_Store_Model = Me
	End Sub
	
	Private Sub detach_NB_Store_OrderDetails(ByVal entity As NB_Store_OrderDetail)
		Me.SendPropertyChanging
		entity.NB_Store_Model = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SNR_AuditTrail")>  _
Partial Public Class SNR_AuditTrail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _RecordType As String
	
	Private _SourceID As Long
	
	Private _AuditEvent As String
	
	Private _ChangeDetail As String
	
	Private _CreatedOn As Date
	
	Private _CreatedBy As Long
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRecordTypeChanging(value As String)
    End Sub
    Partial Private Sub OnRecordTypeChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Long)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnAuditEventChanging(value As String)
    End Sub
    Partial Private Sub OnAuditEventChanged()
    End Sub
    Partial Private Sub OnChangeDetailChanging(value As String)
    End Sub
    Partial Private Sub OnChangeDetailChanged()
    End Sub
    Partial Private Sub OnCreatedOnChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedOnChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As Long)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordType", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property RecordType() As String
		Get
			Return Me._RecordType
		End Get
		Set
			If (String.Equals(Me._RecordType, value) = false) Then
				Me.OnRecordTypeChanging(value)
				Me.SendPropertyChanging
				Me._RecordType = value
				Me.SendPropertyChanged("RecordType")
				Me.OnRecordTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="BigInt NOT NULL")>  _
	Public Property SourceID() As Long
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuditEvent", DbType:="VarChar(100)")>  _
	Public Property AuditEvent() As String
		Get
			Return Me._AuditEvent
		End Get
		Set
			If (String.Equals(Me._AuditEvent, value) = false) Then
				Me.OnAuditEventChanging(value)
				Me.SendPropertyChanging
				Me._AuditEvent = value
				Me.SendPropertyChanged("AuditEvent")
				Me.OnAuditEventChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDetail", DbType:="VarChar(100)")>  _
	Public Property ChangeDetail() As String
		Get
			Return Me._ChangeDetail
		End Get
		Set
			If (String.Equals(Me._ChangeDetail, value) = false) Then
				Me.OnChangeDetailChanging(value)
				Me.SendPropertyChanging
				Me._ChangeDetail = value
				Me.SendPropertyChanged("ChangeDetail")
				Me.OnChangeDetailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOn", DbType:="DateTime NOT NULL")>  _
	Public Property CreatedOn() As Date
		Get
			Return Me._CreatedOn
		End Get
		Set
			If ((Me._CreatedOn = value)  _
						= false) Then
				Me.OnCreatedOnChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOn = value
				Me.SendPropertyChanged("CreatedOn")
				Me.OnCreatedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt NOT NULL")>  _
	Public Property CreatedBy() As Long
		Get
			Return Me._CreatedBy
		End Get
		Set
			If ((Me._CreatedBy = value)  _
						= false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_ProductImage")>  _
Partial Public Class NB_Store_ProductImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageID As Integer
	
	Private _ProductID As System.Nullable(Of Integer)
	
	Private _ImagePath As String
	
	Private _ListOrder As System.Nullable(Of Integer)
	
	Private _Hidden As System.Nullable(Of Boolean)
	
	Private _ImageURL As String
	
	Private _NB_Store_Product As EntityRef(Of NB_Store_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnImagePathChanging(value As String)
    End Sub
    Partial Private Sub OnImagePathChanged()
    End Sub
    Partial Private Sub OnListOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnListOrderChanged()
    End Sub
    Partial Private Sub OnHiddenChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnHiddenChanged()
    End Sub
    Partial Private Sub OnImageURLChanging(value As String)
    End Sub
    Partial Private Sub OnImageURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Product = CType(Nothing, EntityRef(Of NB_Store_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int")>  _
	Public Property ProductID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._NB_Store_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath", DbType:="NVarChar(256)")>  _
	Public Property ImagePath() As String
		Get
			Return Me._ImagePath
		End Get
		Set
			If (String.Equals(Me._ImagePath, value) = false) Then
				Me.OnImagePathChanging(value)
				Me.SendPropertyChanging
				Me._ImagePath = value
				Me.SendPropertyChanged("ImagePath")
				Me.OnImagePathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListOrder", DbType:="Int")>  _
	Public Property ListOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ListOrder
		End Get
		Set
			If (Me._ListOrder.Equals(value) = false) Then
				Me.OnListOrderChanging(value)
				Me.SendPropertyChanging
				Me._ListOrder = value
				Me.SendPropertyChanged("ListOrder")
				Me.OnListOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hidden", DbType:="Bit")>  _
	Public Property Hidden() As System.Nullable(Of Boolean)
		Get
			Return Me._Hidden
		End Get
		Set
			If (Me._Hidden.Equals(value) = false) Then
				Me.OnHiddenChanging(value)
				Me.SendPropertyChanging
				Me._Hidden = value
				Me.SendPropertyChanged("Hidden")
				Me.OnHiddenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(256)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me.OnImageURLChanging(value)
				Me.SendPropertyChanging
				Me._ImageURL = value
				Me.SendPropertyChanged("ImageURL")
				Me.OnImageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductImage", Storage:="_NB_Store_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
	Public Property NB_Store_Product() As NB_Store_Product
		Get
			Return Me._NB_Store_Product.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Product = Me._NB_Store_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Product.Entity = Nothing
					previousValue.NB_Store_ProductImages.Remove(Me)
				End If
				Me._NB_Store_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_ProductImages.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NB_Store_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalLocalization")>  _
Partial Public Class PortalLocalization
	
	Private _PortalID As Integer
	
	Private _CultureCode As String
	
	Private _PortalName As String
	
	Private _LogoFile As String
	
	Private _FooterText As String
	
	Private _Description As String
	
	Private _KeyWords As String
	
	Private _BackgroundFile As String
	
	Private _HomeTabId As System.Nullable(Of Integer)
	
	Private _LoginTabId As System.Nullable(Of Integer)
	
	Private _UserTabId As System.Nullable(Of Integer)
	
	Private _AdminTabId As System.Nullable(Of Integer)
	
	Private _SplashTabId As System.Nullable(Of Integer)
	
	Private _CreatedByUserID As System.Nullable(Of Integer)
	
	Private _CreatedOnDate As System.Nullable(Of Date)
	
	Private _LastModifiedByUserID As System.Nullable(Of Integer)
	
	Private _LastModifiedOnDate As System.Nullable(Of Date)
	
	Private _RegisterTabId As System.Nullable(Of Integer)
	
	Private _SearchTabId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me._PortalID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CultureCode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property CultureCode() As String
		Get
			Return Me._CultureCode
		End Get
		Set
			If (String.Equals(Me._CultureCode, value) = false) Then
				Me._CultureCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogoFile", DbType:="NVarChar(50)")>  _
	Public Property LogoFile() As String
		Get
			Return Me._LogoFile
		End Get
		Set
			If (String.Equals(Me._LogoFile, value) = false) Then
				Me._LogoFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FooterText", DbType:="NVarChar(100)")>  _
	Public Property FooterText() As String
		Get
			Return Me._FooterText
		End Get
		Set
			If (String.Equals(Me._FooterText, value) = false) Then
				Me._FooterText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyWords", DbType:="NVarChar(500)")>  _
	Public Property KeyWords() As String
		Get
			Return Me._KeyWords
		End Get
		Set
			If (String.Equals(Me._KeyWords, value) = false) Then
				Me._KeyWords = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BackgroundFile", DbType:="NVarChar(50)")>  _
	Public Property BackgroundFile() As String
		Get
			Return Me._BackgroundFile
		End Get
		Set
			If (String.Equals(Me._BackgroundFile, value) = false) Then
				Me._BackgroundFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomeTabId", DbType:="Int")>  _
	Public Property HomeTabId() As System.Nullable(Of Integer)
		Get
			Return Me._HomeTabId
		End Get
		Set
			If (Me._HomeTabId.Equals(value) = false) Then
				Me._HomeTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginTabId", DbType:="Int")>  _
	Public Property LoginTabId() As System.Nullable(Of Integer)
		Get
			Return Me._LoginTabId
		End Get
		Set
			If (Me._LoginTabId.Equals(value) = false) Then
				Me._LoginTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTabId", DbType:="Int")>  _
	Public Property UserTabId() As System.Nullable(Of Integer)
		Get
			Return Me._UserTabId
		End Get
		Set
			If (Me._UserTabId.Equals(value) = false) Then
				Me._UserTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminTabId", DbType:="Int")>  _
	Public Property AdminTabId() As System.Nullable(Of Integer)
		Get
			Return Me._AdminTabId
		End Get
		Set
			If (Me._AdminTabId.Equals(value) = false) Then
				Me._AdminTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplashTabId", DbType:="Int")>  _
	Public Property SplashTabId() As System.Nullable(Of Integer)
		Get
			Return Me._SplashTabId
		End Get
		Set
			If (Me._SplashTabId.Equals(value) = false) Then
				Me._SplashTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUserID", DbType:="Int")>  _
	Public Property CreatedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedByUserID
		End Get
		Set
			If (Me._CreatedByUserID.Equals(value) = false) Then
				Me._CreatedByUserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOnDate", DbType:="DateTime")>  _
	Public Property CreatedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOnDate
		End Get
		Set
			If (Me._CreatedOnDate.Equals(value) = false) Then
				Me._CreatedOnDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedByUserID", DbType:="Int")>  _
	Public Property LastModifiedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._LastModifiedByUserID
		End Get
		Set
			If (Me._LastModifiedByUserID.Equals(value) = false) Then
				Me._LastModifiedByUserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedOnDate", DbType:="DateTime")>  _
	Public Property LastModifiedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedOnDate
		End Get
		Set
			If (Me._LastModifiedOnDate.Equals(value) = false) Then
				Me._LastModifiedOnDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterTabId", DbType:="Int")>  _
	Public Property RegisterTabId() As System.Nullable(Of Integer)
		Get
			Return Me._RegisterTabId
		End Get
		Set
			If (Me._RegisterTabId.Equals(value) = false) Then
				Me._RegisterTabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SearchTabId", DbType:="Int")>  _
	Public Property SearchTabId() As System.Nullable(Of Integer)
		Get
			Return Me._SearchTabId
		End Get
		Set
			If (Me._SearchTabId.Equals(value) = false) Then
				Me._SearchTabId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_Categories")>  _
Partial Public Class NB_Store_Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _PortalID As Integer
	
	Private _Archived As Boolean
	
	Private _CreatedByUser As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _ParentCategoryID As System.Nullable(Of Integer)
	
	Private _ListOrder As System.Nullable(Of Integer)
	
	Private _ProductTemplate As String
	
	Private _ListItemTemplate As String
	
	Private _ListAltItemTemplate As String
	
	Private _hide As System.Nullable(Of Boolean)
	
	Private _ImageURL As String
	
	Private _NB_Store_CategoryLangs As EntitySet(Of NB_Store_CategoryLang)
	
	Private _NB_Store_ProductCategories As EntitySet(Of NB_Store_ProductCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnArchivedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnArchivedChanged()
    End Sub
    Partial Private Sub OnCreatedByUserChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByUserChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnParentCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentCategoryIDChanged()
    End Sub
    Partial Private Sub OnListOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnListOrderChanged()
    End Sub
    Partial Private Sub OnProductTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnProductTemplateChanged()
    End Sub
    Partial Private Sub OnListItemTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnListItemTemplateChanged()
    End Sub
    Partial Private Sub OnListAltItemTemplateChanging(value As String)
    End Sub
    Partial Private Sub OnListAltItemTemplateChanged()
    End Sub
    Partial Private Sub OnhideChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnhideChanged()
    End Sub
    Partial Private Sub OnImageURLChanging(value As String)
    End Sub
    Partial Private Sub OnImageURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_CategoryLangs = New EntitySet(Of NB_Store_CategoryLang)(AddressOf Me.attach_NB_Store_CategoryLangs, AddressOf Me.detach_NB_Store_CategoryLangs)
		Me._NB_Store_ProductCategories = New EntitySet(Of NB_Store_ProductCategory)(AddressOf Me.attach_NB_Store_ProductCategories, AddressOf Me.detach_NB_Store_ProductCategories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Archived", DbType:="Bit NOT NULL")>  _
	Public Property Archived() As Boolean
		Get
			Return Me._Archived
		End Get
		Set
			If ((Me._Archived = value)  _
						= false) Then
				Me.OnArchivedChanging(value)
				Me.SendPropertyChanging
				Me._Archived = value
				Me.SendPropertyChanged("Archived")
				Me.OnArchivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUser", DbType:="NVarChar(100)")>  _
	Public Property CreatedByUser() As String
		Get
			Return Me._CreatedByUser
		End Get
		Set
			If (String.Equals(Me._CreatedByUser, value) = false) Then
				Me.OnCreatedByUserChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUser = value
				Me.SendPropertyChanged("CreatedByUser")
				Me.OnCreatedByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentCategoryID", DbType:="Int")>  _
	Public Property ParentCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentCategoryID
		End Get
		Set
			If (Me._ParentCategoryID.Equals(value) = false) Then
				Me.OnParentCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentCategoryID = value
				Me.SendPropertyChanged("ParentCategoryID")
				Me.OnParentCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListOrder", DbType:="Int")>  _
	Public Property ListOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ListOrder
		End Get
		Set
			If (Me._ListOrder.Equals(value) = false) Then
				Me.OnListOrderChanging(value)
				Me.SendPropertyChanging
				Me._ListOrder = value
				Me.SendPropertyChanged("ListOrder")
				Me.OnListOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductTemplate", DbType:="NVarChar(50)")>  _
	Public Property ProductTemplate() As String
		Get
			Return Me._ProductTemplate
		End Get
		Set
			If (String.Equals(Me._ProductTemplate, value) = false) Then
				Me.OnProductTemplateChanging(value)
				Me.SendPropertyChanging
				Me._ProductTemplate = value
				Me.SendPropertyChanged("ProductTemplate")
				Me.OnProductTemplateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListItemTemplate", DbType:="NVarChar(50)")>  _
	Public Property ListItemTemplate() As String
		Get
			Return Me._ListItemTemplate
		End Get
		Set
			If (String.Equals(Me._ListItemTemplate, value) = false) Then
				Me.OnListItemTemplateChanging(value)
				Me.SendPropertyChanging
				Me._ListItemTemplate = value
				Me.SendPropertyChanged("ListItemTemplate")
				Me.OnListItemTemplateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListAltItemTemplate", DbType:="NVarChar(50)")>  _
	Public Property ListAltItemTemplate() As String
		Get
			Return Me._ListAltItemTemplate
		End Get
		Set
			If (String.Equals(Me._ListAltItemTemplate, value) = false) Then
				Me.OnListAltItemTemplateChanging(value)
				Me.SendPropertyChanging
				Me._ListAltItemTemplate = value
				Me.SendPropertyChanged("ListAltItemTemplate")
				Me.OnListAltItemTemplateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hide", DbType:="Bit")>  _
	Public Property hide() As System.Nullable(Of Boolean)
		Get
			Return Me._hide
		End Get
		Set
			If (Me._hide.Equals(value) = false) Then
				Me.OnhideChanging(value)
				Me.SendPropertyChanging
				Me._hide = value
				Me.SendPropertyChanged("hide")
				Me.OnhideChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(256)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me.OnImageURLChanging(value)
				Me.SendPropertyChanging
				Me._ImageURL = value
				Me.SendPropertyChanged("ImageURL")
				Me.OnImageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Category_NB_Store_CategoryLang", Storage:="_NB_Store_CategoryLangs", ThisKey:="CategoryID", OtherKey:="CategoryID")>  _
	Public Property NB_Store_CategoryLangs() As EntitySet(Of NB_Store_CategoryLang)
		Get
			Return Me._NB_Store_CategoryLangs
		End Get
		Set
			Me._NB_Store_CategoryLangs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Category_NB_Store_ProductCategory", Storage:="_NB_Store_ProductCategories", ThisKey:="CategoryID", OtherKey:="CategoryID")>  _
	Public Property NB_Store_ProductCategories() As EntitySet(Of NB_Store_ProductCategory)
		Get
			Return Me._NB_Store_ProductCategories
		End Get
		Set
			Me._NB_Store_ProductCategories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NB_Store_CategoryLangs(ByVal entity As NB_Store_CategoryLang)
		Me.SendPropertyChanging
		entity.NB_Store_Category = Me
	End Sub
	
	Private Sub detach_NB_Store_CategoryLangs(ByVal entity As NB_Store_CategoryLang)
		Me.SendPropertyChanging
		entity.NB_Store_Category = Nothing
	End Sub
	
	Private Sub attach_NB_Store_ProductCategories(ByVal entity As NB_Store_ProductCategory)
		Me.SendPropertyChanging
		entity.NB_Store_Category = Me
	End Sub
	
	Private Sub detach_NB_Store_ProductCategories(ByVal entity As NB_Store_ProductCategory)
		Me.SendPropertyChanging
		entity.NB_Store_Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_CategoryLang")>  _
Partial Public Class NB_Store_CategoryLang
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _Lang As String
	
	Private _CategoryName As String
	
	Private _CategoryDesc As String
	
	Private _Message As String
	
	Private _NB_Store_Category As EntityRef(Of NB_Store_Category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnLangChanging(value As String)
    End Sub
    Partial Private Sub OnLangChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnCategoryDescChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryDescChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Category = CType(Nothing, EntityRef(Of NB_Store_Category))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				If Me._NB_Store_Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lang", DbType:="NChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Lang() As String
		Get
			Return Me._Lang
		End Get
		Set
			If (String.Equals(Me._Lang, value) = false) Then
				Me.OnLangChanging(value)
				Me.SendPropertyChanging
				Me._Lang = value
				Me.SendPropertyChanged("Lang")
				Me.OnLangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryDesc", DbType:="NVarChar(500)")>  _
	Public Property CategoryDesc() As String
		Get
			Return Me._CategoryDesc
		End Get
		Set
			If (String.Equals(Me._CategoryDesc, value) = false) Then
				Me.OnCategoryDescChanging(value)
				Me.SendPropertyChanging
				Me._CategoryDesc = value
				Me.SendPropertyChanged("CategoryDesc")
				Me.OnCategoryDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Category_NB_Store_CategoryLang", Storage:="_NB_Store_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Category() As NB_Store_Category
		Get
			Return Me._NB_Store_Category.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Category = Me._NB_Store_Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Category.Entity = Nothing
					previousValue.NB_Store_CategoryLangs.Remove(Me)
				End If
				Me._NB_Store_Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_CategoryLangs.Add(Me)
					Me._CategoryID = value.CategoryID
				Else
					Me._CategoryID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NB_Store_Category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_ProductCategory")>  _
Partial Public Class NB_Store_ProductCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _CategoryID As Integer
	
	Private _NB_Store_Category As EntityRef(Of NB_Store_Category)
	
	Private _NB_Store_Product As EntityRef(Of NB_Store_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Category = CType(Nothing, EntityRef(Of NB_Store_Category))
		Me._NB_Store_Product = CType(Nothing, EntityRef(Of NB_Store_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If Me._NB_Store_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				If Me._NB_Store_Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Category_NB_Store_ProductCategory", Storage:="_NB_Store_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Category() As NB_Store_Category
		Get
			Return Me._NB_Store_Category.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Category = Me._NB_Store_Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Category.Entity = Nothing
					previousValue.NB_Store_ProductCategories.Remove(Me)
				End If
				Me._NB_Store_Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_ProductCategories.Add(Me)
					Me._CategoryID = value.CategoryID
				Else
					Me._CategoryID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NB_Store_Category")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductCategory", Storage:="_NB_Store_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Product() As NB_Store_Product
		Get
			Return Me._NB_Store_Product.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Product = Me._NB_Store_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Product.Entity = Nothing
					previousValue.NB_Store_ProductCategories.Remove(Me)
				End If
				Me._NB_Store_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_ProductCategories.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NB_Store_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_ProductLang")>  _
Partial Public Class NB_Store_ProductLang
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _Lang As String
	
	Private _Summary As String
	
	Private _Description As String
	
	Private _Manufacturer As String
	
	Private _ProductName As String
	
	Private _XMLData As System.Xml.Linq.XElement
	
	Private _SEOName As String
	
	Private _TagWords As String
	
	Private _NB_Store_Product As EntityRef(Of NB_Store_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnLangChanging(value As String)
    End Sub
    Partial Private Sub OnLangChanged()
    End Sub
    Partial Private Sub OnSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnSummaryChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnXMLDataChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnXMLDataChanged()
    End Sub
    Partial Private Sub OnSEONameChanging(value As String)
    End Sub
    Partial Private Sub OnSEONameChanged()
    End Sub
    Partial Private Sub OnTagWordsChanging(value As String)
    End Sub
    Partial Private Sub OnTagWordsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Product = CType(Nothing, EntityRef(Of NB_Store_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If Me._NB_Store_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lang", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Lang() As String
		Get
			Return Me._Lang
		End Get
		Set
			If (String.Equals(Me._Lang, value) = false) Then
				Me.OnLangChanging(value)
				Me.SendPropertyChanging
				Me._Lang = value
				Me.SendPropertyChanged("Lang")
				Me.OnLangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Summary", DbType:="NVarChar(1000)")>  _
	Public Property Summary() As String
		Get
			Return Me._Summary
		End Get
		Set
			If (String.Equals(Me._Summary, value) = false) Then
				Me.OnSummaryChanging(value)
				Me.SendPropertyChanging
				Me._Summary = value
				Me.SendPropertyChanged("Summary")
				Me.OnSummaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="NVarChar(50)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(50)")>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLData", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property XMLData() As System.Xml.Linq.XElement
		Get
			Return Me._XMLData
		End Get
		Set
			If (Object.Equals(Me._XMLData, value) = false) Then
				Me.OnXMLDataChanging(value)
				Me.SendPropertyChanging
				Me._XMLData = value
				Me.SendPropertyChanged("XMLData")
				Me.OnXMLDataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEOName", DbType:="NVarChar(150)")>  _
	Public Property SEOName() As String
		Get
			Return Me._SEOName
		End Get
		Set
			If (String.Equals(Me._SEOName, value) = false) Then
				Me.OnSEONameChanging(value)
				Me.SendPropertyChanging
				Me._SEOName = value
				Me.SendPropertyChanged("SEOName")
				Me.OnSEONameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagWords", DbType:="NVarChar(255)")>  _
	Public Property TagWords() As String
		Get
			Return Me._TagWords
		End Get
		Set
			If (String.Equals(Me._TagWords, value) = false) Then
				Me.OnTagWordsChanging(value)
				Me.SendPropertyChanging
				Me._TagWords = value
				Me.SendPropertyChanged("TagWords")
				Me.OnTagWordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Product_NB_Store_ProductLang", Storage:="_NB_Store_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property NB_Store_Product() As NB_Store_Product
		Get
			Return Me._NB_Store_Product.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Product = Me._NB_Store_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Product.Entity = Nothing
					previousValue.NB_Store_ProductLangs.Remove(Me)
				End If
				Me._NB_Store_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_ProductLangs.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NB_Store_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserPortals")>  _
Partial Public Class UserPortal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As Integer
	
	Private _PortalId As Integer
	
	Private _UserPortalId As Integer
	
	Private _CreatedDate As Date
	
	Private _Authorised As Boolean
	
	Private _IsDeleted As Boolean
	
	Private _RefreshRoles As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnUserPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserPortalIdChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnAuthorisedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAuthorisedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnRefreshRolesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRefreshRolesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPortalId", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property UserPortalId() As Integer
		Get
			Return Me._UserPortalId
		End Get
		Set
			If ((Me._UserPortalId = value)  _
						= false) Then
				Me.OnUserPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._UserPortalId = value
				Me.SendPropertyChanged("UserPortalId")
				Me.OnUserPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreatedDate() As Date
		Get
			Return Me._CreatedDate
		End Get
		Set
			If ((Me._CreatedDate = value)  _
						= false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Authorised", DbType:="Bit NOT NULL")>  _
	Public Property Authorised() As Boolean
		Get
			Return Me._Authorised
		End Get
		Set
			If ((Me._Authorised = value)  _
						= false) Then
				Me.OnAuthorisedChanging(value)
				Me.SendPropertyChanging
				Me._Authorised = value
				Me.SendPropertyChanged("Authorised")
				Me.OnAuthorisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefreshRoles", DbType:="Bit NOT NULL")>  _
	Public Property RefreshRoles() As Boolean
		Get
			Return Me._RefreshRoles
		End Get
		Set
			If ((Me._RefreshRoles = value)  _
						= false) Then
				Me.OnRefreshRolesChanging(value)
				Me.SendPropertyChanging
				Me._RefreshRoles = value
				Me.SendPropertyChanged("RefreshRoles")
				Me.OnRefreshRolesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SNR_Configuration")>  _
Partial Public Class SNR_Configuration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _ConfigKey As String
	
	Private _ConfigValue As String
	
	Private _IsDeleted As Boolean
	
	Private _IsAdmin As System.Nullable(Of Boolean)
	
	Private _CreatedOn As Date
	
	Private _CreatedBY As Long
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnConfigKeyChanging(value As String)
    End Sub
    Partial Private Sub OnConfigKeyChanged()
    End Sub
    Partial Private Sub OnConfigValueChanging(value As String)
    End Sub
    Partial Private Sub OnConfigValueChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsAdminChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAdminChanged()
    End Sub
    Partial Private Sub OnCreatedOnChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedOnChanged()
    End Sub
    Partial Private Sub OnCreatedBYChanging(value As Long)
    End Sub
    Partial Private Sub OnCreatedBYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConfigKey", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ConfigKey() As String
		Get
			Return Me._ConfigKey
		End Get
		Set
			If (String.Equals(Me._ConfigKey, value) = false) Then
				Me.OnConfigKeyChanging(value)
				Me.SendPropertyChanging
				Me._ConfigKey = value
				Me.SendPropertyChanged("ConfigKey")
				Me.OnConfigKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConfigValue", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ConfigValue() As String
		Get
			Return Me._ConfigValue
		End Get
		Set
			If (String.Equals(Me._ConfigValue, value) = false) Then
				Me.OnConfigValueChanging(value)
				Me.SendPropertyChanging
				Me._ConfigValue = value
				Me.SendPropertyChanged("ConfigValue")
				Me.OnConfigValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAdmin", DbType:="Bit")>  _
	Public Property IsAdmin() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAdmin
		End Get
		Set
			If (Me._IsAdmin.Equals(value) = false) Then
				Me.OnIsAdminChanging(value)
				Me.SendPropertyChanging
				Me._IsAdmin = value
				Me.SendPropertyChanged("IsAdmin")
				Me.OnIsAdminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOn", DbType:="SmallDateTime NOT NULL")>  _
	Public Property CreatedOn() As Date
		Get
			Return Me._CreatedOn
		End Get
		Set
			If ((Me._CreatedOn = value)  _
						= false) Then
				Me.OnCreatedOnChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOn = value
				Me.SendPropertyChanged("CreatedOn")
				Me.OnCreatedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBY", DbType:="BigInt NOT NULL")>  _
	Public Property CreatedBY() As Long
		Get
			Return Me._CreatedBY
		End Get
		Set
			If ((Me._CreatedBY = value)  _
						= false) Then
				Me.OnCreatedBYChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBY = value
				Me.SendPropertyChanged("CreatedBY")
				Me.OnCreatedBYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SNR_Address")>  _
Partial Public Class SNR_Address
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of Long)
	
	Private _PortalID As Integer
	
	Private _ContactName As String
	
	Private _CompanyName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _CountryKey As Integer
	
	Private _Region As String
	
	Private _PostCode As String
	
	Private _Phone As String
	
	Private _Mobile As String
	
	Private _Email As String
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _CopyFromGlobal As System.Nullable(Of Boolean)
	
	Private _CreatedOn As Date
	
	Private _CreatedBy As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnCountryKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnCountryKeyChanged()
    End Sub
    Partial Private Sub OnRegionChanging(value As String)
    End Sub
    Partial Private Sub OnRegionChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCopyFromGlobalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCopyFromGlobalChanged()
    End Sub
    Partial Private Sub OnCreatedOnChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedOnChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As Integer)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="BigInt")>  _
	Public Property UserID() As System.Nullable(Of Long)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(100)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(100)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryKey", DbType:="Int NOT NULL")>  _
	Public Property CountryKey() As Integer
		Get
			Return Me._CountryKey
		End Get
		Set
			If ((Me._CountryKey = value)  _
						= false) Then
				Me.OnCountryKeyChanging(value)
				Me.SendPropertyChanging
				Me._CountryKey = value
				Me.SendPropertyChanged("CountryKey")
				Me.OnCountryKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(100)")>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me.OnRegionChanging(value)
				Me.SendPropertyChanging
				Me._Region = value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(20)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(20)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopyFromGlobal", DbType:="Bit")>  _
	Public Property CopyFromGlobal() As System.Nullable(Of Boolean)
		Get
			Return Me._CopyFromGlobal
		End Get
		Set
			If (Me._CopyFromGlobal.Equals(value) = false) Then
				Me.OnCopyFromGlobalChanging(value)
				Me.SendPropertyChanging
				Me._CopyFromGlobal = value
				Me.SendPropertyChanged("CopyFromGlobal")
				Me.OnCopyFromGlobalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOn", DbType:="SmallDateTime NOT NULL")>  _
	Public Property CreatedOn() As Date
		Get
			Return Me._CreatedOn
		End Get
		Set
			If ((Me._CreatedOn = value)  _
						= false) Then
				Me.OnCreatedOnChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOn = value
				Me.SendPropertyChanged("CreatedOn")
				Me.OnCreatedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="Int NOT NULL")>  _
	Public Property CreatedBy() As Integer
		Get
			Return Me._CreatedBy
		End Get
		Set
			If ((Me._CreatedBy = value)  _
						= false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NB_Store_Address")>  _
Partial Public Class NB_Store_Address
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AddressID As Integer
	
	Private _PortalID As Integer
	
	Private _UserID As Integer
	
	Private _AddressDescription As String
	
	Private _AddressName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _RegionCode As String
	
	Private _CountryCode As String
	
	Private _PostalCode As String
	
	Private _Phone1 As String
	
	Private _Phone2 As String
	
	Private _PrimaryAddress As Boolean
	
	Private _CreatedByUser As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _OrderID As System.Nullable(Of Integer)
	
	Private _CompanyName As String
	
	Private _Extra1 As String
	
	Private _Extra2 As String
	
	Private _Extra3 As String
	
	Private _Extra4 As String
	
	Private _VATNumber As String
	
	Private _NB_Store_Order As EntityRef(Of NB_Store_Order)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnAddressDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAddressDescriptionChanged()
    End Sub
    Partial Private Sub OnAddressNameChanging(value As String)
    End Sub
    Partial Private Sub OnAddressNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnRegionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRegionCodeChanged()
    End Sub
    Partial Private Sub OnCountryCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCountryCodeChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnPhone1Changed()
    End Sub
    Partial Private Sub OnPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnPhone2Changed()
    End Sub
    Partial Private Sub OnPrimaryAddressChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPrimaryAddressChanged()
    End Sub
    Partial Private Sub OnCreatedByUserChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByUserChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnExtra1Changing(value As String)
    End Sub
    Partial Private Sub OnExtra1Changed()
    End Sub
    Partial Private Sub OnExtra2Changing(value As String)
    End Sub
    Partial Private Sub OnExtra2Changed()
    End Sub
    Partial Private Sub OnExtra3Changing(value As String)
    End Sub
    Partial Private Sub OnExtra3Changed()
    End Sub
    Partial Private Sub OnExtra4Changing(value As String)
    End Sub
    Partial Private Sub OnExtra4Changed()
    End Sub
    Partial Private Sub OnVATNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVATNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NB_Store_Order = CType(Nothing, EntityRef(Of NB_Store_Order))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AddressID() As Integer
		Get
			Return Me._AddressID
		End Get
		Set
			If ((Me._AddressID = value)  _
						= false) Then
				Me.OnAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._AddressID = value
				Me.SendPropertyChanged("AddressID")
				Me.OnAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressDescription", DbType:="NVarChar(100)")>  _
	Public Property AddressDescription() As String
		Get
			Return Me._AddressDescription
		End Get
		Set
			If (String.Equals(Me._AddressDescription, value) = false) Then
				Me.OnAddressDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._AddressDescription = value
				Me.SendPropertyChanged("AddressDescription")
				Me.OnAddressDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressName", DbType:="NVarChar(50)")>  _
	Public Property AddressName() As String
		Get
			Return Me._AddressName
		End Get
		Set
			If (String.Equals(Me._AddressName, value) = false) Then
				Me.OnAddressNameChanging(value)
				Me.SendPropertyChanging
				Me._AddressName = value
				Me.SendPropertyChanged("AddressName")
				Me.OnAddressNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(100)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(100)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(100)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionCode", DbType:="NVarChar(100)")>  _
	Public Property RegionCode() As String
		Get
			Return Me._RegionCode
		End Get
		Set
			If (String.Equals(Me._RegionCode, value) = false) Then
				Me.OnRegionCodeChanging(value)
				Me.SendPropertyChanging
				Me._RegionCode = value
				Me.SendPropertyChanged("RegionCode")
				Me.OnRegionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryCode", DbType:="NVarChar(100)")>  _
	Public Property CountryCode() As String
		Get
			Return Me._CountryCode
		End Get
		Set
			If (String.Equals(Me._CountryCode, value) = false) Then
				Me.OnCountryCodeChanging(value)
				Me.SendPropertyChanging
				Me._CountryCode = value
				Me.SendPropertyChanged("CountryCode")
				Me.OnCountryCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(20)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me.OnPhone1Changing(value)
				Me.SendPropertyChanging
				Me._Phone1 = value
				Me.SendPropertyChanged("Phone1")
				Me.OnPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(20)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me.OnPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Phone2 = value
				Me.SendPropertyChanged("Phone2")
				Me.OnPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryAddress", DbType:="Bit NOT NULL")>  _
	Public Property PrimaryAddress() As Boolean
		Get
			Return Me._PrimaryAddress
		End Get
		Set
			If ((Me._PrimaryAddress = value)  _
						= false) Then
				Me.OnPrimaryAddressChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryAddress = value
				Me.SendPropertyChanged("PrimaryAddress")
				Me.OnPrimaryAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUser", DbType:="NVarChar(100)")>  _
	Public Property CreatedByUser() As String
		Get
			Return Me._CreatedByUser
		End Get
		Set
			If (String.Equals(Me._CreatedByUser, value) = false) Then
				Me.OnCreatedByUserChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUser = value
				Me.SendPropertyChanged("CreatedByUser")
				Me.OnCreatedByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int")>  _
	Public Property OrderID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderID
		End Get
		Set
			If (Me._OrderID.Equals(value) = false) Then
				If Me._NB_Store_Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(255)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra1", DbType:="NVarChar(255)")>  _
	Public Property Extra1() As String
		Get
			Return Me._Extra1
		End Get
		Set
			If (String.Equals(Me._Extra1, value) = false) Then
				Me.OnExtra1Changing(value)
				Me.SendPropertyChanging
				Me._Extra1 = value
				Me.SendPropertyChanged("Extra1")
				Me.OnExtra1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra2", DbType:="NVarChar(255)")>  _
	Public Property Extra2() As String
		Get
			Return Me._Extra2
		End Get
		Set
			If (String.Equals(Me._Extra2, value) = false) Then
				Me.OnExtra2Changing(value)
				Me.SendPropertyChanging
				Me._Extra2 = value
				Me.SendPropertyChanged("Extra2")
				Me.OnExtra2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra3", DbType:="NVarChar(255)")>  _
	Public Property Extra3() As String
		Get
			Return Me._Extra3
		End Get
		Set
			If (String.Equals(Me._Extra3, value) = false) Then
				Me.OnExtra3Changing(value)
				Me.SendPropertyChanging
				Me._Extra3 = value
				Me.SendPropertyChanged("Extra3")
				Me.OnExtra3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra4", DbType:="NVarChar(255)")>  _
	Public Property Extra4() As String
		Get
			Return Me._Extra4
		End Get
		Set
			If (String.Equals(Me._Extra4, value) = false) Then
				Me.OnExtra4Changing(value)
				Me.SendPropertyChanging
				Me._Extra4 = value
				Me.SendPropertyChanged("Extra4")
				Me.OnExtra4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATNumber", DbType:="NVarChar(50)")>  _
	Public Property VATNumber() As String
		Get
			Return Me._VATNumber
		End Get
		Set
			If (String.Equals(Me._VATNumber, value) = false) Then
				Me.OnVATNumberChanging(value)
				Me.SendPropertyChanging
				Me._VATNumber = value
				Me.SendPropertyChanged("VATNumber")
				Me.OnVATNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NB_Store_Order_NB_Store_Address", Storage:="_NB_Store_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=true)>  _
	Public Property NB_Store_Order() As NB_Store_Order
		Get
			Return Me._NB_Store_Order.Entity
		End Get
		Set
			Dim previousValue As NB_Store_Order = Me._NB_Store_Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NB_Store_Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NB_Store_Order.Entity = Nothing
					previousValue.NB_Store_Addresses.Remove(Me)
				End If
				Me._NB_Store_Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NB_Store_Addresses.Add(Me)
					Me._OrderID = value.OrderID
				Else
					Me._OrderID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NB_Store_Order")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SNR_COUNTRY")>  _
Partial Public Class SNR_COUNTRY
	
	Private _CountryKey As Integer
	
	Private _CountryName As String
	
	Private _CountryCode As String
	
	Private _DeletedFlag As Boolean
	
	Private _Source As String
	
	Private _Importance As System.Nullable(Of Byte)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryKey", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CountryKey() As Integer
		Get
			Return Me._CountryKey
		End Get
		Set
			If ((Me._CountryKey = value)  _
						= false) Then
				Me._CountryKey = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryName", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property CountryName() As String
		Get
			Return Me._CountryName
		End Get
		Set
			If (String.Equals(Me._CountryName, value) = false) Then
				Me._CountryName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryCode", DbType:="NVarChar(2)")>  _
	Public Property CountryCode() As String
		Get
			Return Me._CountryCode
		End Get
		Set
			If (String.Equals(Me._CountryCode, value) = false) Then
				Me._CountryCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeletedFlag", DbType:="Bit NOT NULL")>  _
	Public Property DeletedFlag() As Boolean
		Get
			Return Me._DeletedFlag
		End Get
		Set
			If ((Me._DeletedFlag = value)  _
						= false) Then
				Me._DeletedFlag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="NChar(2)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me._Source = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importance", DbType:="TinyInt")>  _
	Public Property Importance() As System.Nullable(Of Byte)
		Get
			Return Me._Importance
		End Get
		Set
			If (Me._Importance.Equals(value) = false) Then
				Me._Importance = value
			End If
		End Set
	End Property
End Class

Partial Public Class NEvoweb_NB_Store_Address_UpdateResult
	
	Private _AddressID As Integer
	
	Private _PortalID As Integer
	
	Private _UserID As Integer
	
	Private _AddressDescription As String
	
	Private _AddressName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _RegionCode As String
	
	Private _CountryCode As String
	
	Private _PostalCode As String
	
	Private _Phone1 As String
	
	Private _Phone2 As String
	
	Private _PrimaryAddress As Boolean
	
	Private _CreatedByUser As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _OrderID As System.Nullable(Of Integer)
	
	Private _CompanyName As String
	
	Private _Extra1 As String
	
	Private _Extra2 As String
	
	Private _Extra3 As String
	
	Private _Extra4 As String
	
	Private _VATNumber As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressID", DbType:="Int NOT NULL")>  _
	Public Property AddressID() As Integer
		Get
			Return Me._AddressID
		End Get
		Set
			If ((Me._AddressID = value)  _
						= false) Then
				Me._AddressID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me._PortalID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressDescription", DbType:="NVarChar(100)")>  _
	Public Property AddressDescription() As String
		Get
			Return Me._AddressDescription
		End Get
		Set
			If (String.Equals(Me._AddressDescription, value) = false) Then
				Me._AddressDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressName", DbType:="NVarChar(50)")>  _
	Public Property AddressName() As String
		Get
			Return Me._AddressName
		End Get
		Set
			If (String.Equals(Me._AddressName, value) = false) Then
				Me._AddressName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(100)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(100)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me._Address2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(100)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionCode", DbType:="NVarChar(100)")>  _
	Public Property RegionCode() As String
		Get
			Return Me._RegionCode
		End Get
		Set
			If (String.Equals(Me._RegionCode, value) = false) Then
				Me._RegionCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryCode", DbType:="NVarChar(100)")>  _
	Public Property CountryCode() As String
		Get
			Return Me._CountryCode
		End Get
		Set
			If (String.Equals(Me._CountryCode, value) = false) Then
				Me._CountryCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me._PostalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(20)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me._Phone1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(20)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me._Phone2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryAddress", DbType:="Bit NOT NULL")>  _
	Public Property PrimaryAddress() As Boolean
		Get
			Return Me._PrimaryAddress
		End Get
		Set
			If ((Me._PrimaryAddress = value)  _
						= false) Then
				Me._PrimaryAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUser", DbType:="NVarChar(100)")>  _
	Public Property CreatedByUser() As String
		Get
			Return Me._CreatedByUser
		End Get
		Set
			If (String.Equals(Me._CreatedByUser, value) = false) Then
				Me._CreatedByUser = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me._CreatedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int")>  _
	Public Property OrderID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderID
		End Get
		Set
			If (Me._OrderID.Equals(value) = false) Then
				Me._OrderID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(255)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me._CompanyName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra1", DbType:="NVarChar(255)")>  _
	Public Property Extra1() As String
		Get
			Return Me._Extra1
		End Get
		Set
			If (String.Equals(Me._Extra1, value) = false) Then
				Me._Extra1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra2", DbType:="NVarChar(255)")>  _
	Public Property Extra2() As String
		Get
			Return Me._Extra2
		End Get
		Set
			If (String.Equals(Me._Extra2, value) = false) Then
				Me._Extra2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra3", DbType:="NVarChar(255)")>  _
	Public Property Extra3() As String
		Get
			Return Me._Extra3
		End Get
		Set
			If (String.Equals(Me._Extra3, value) = false) Then
				Me._Extra3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra4", DbType:="NVarChar(255)")>  _
	Public Property Extra4() As String
		Get
			Return Me._Extra4
		End Get
		Set
			If (String.Equals(Me._Extra4, value) = false) Then
				Me._Extra4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATNumber", DbType:="NVarChar(50)")>  _
	Public Property VATNumber() As String
		Get
			Return Me._VATNumber
		End Get
		Set
			If (String.Equals(Me._VATNumber, value) = false) Then
				Me._VATNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class SNR_DENTON_ORDER_SEARCHResult
	
	Private _OrderID As Integer
	
	Private _OrderNumber As String
	
	Private _OrderDate As System.Nullable(Of Date)
	
	Private _ShippingAddressID As System.Nullable(Of Integer)
	
	Private _BillingAddressID As System.Nullable(Of Integer)
	
	Private _OrderGUID As String
	
	Private _OrderStatusID As System.Nullable(Of Integer)
	
	Private _PortalID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				Me._OrderID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderNumber", DbType:="NVarChar(50)")>  _
	Public Property OrderNumber() As String
		Get
			Return Me._OrderNumber
		End Get
		Set
			If (String.Equals(Me._OrderNumber, value) = false) Then
				Me._OrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>  _
	Public Property OrderDate() As System.Nullable(Of Date)
		Get
			Return Me._OrderDate
		End Get
		Set
			If (Me._OrderDate.Equals(value) = false) Then
				Me._OrderDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingAddressID", DbType:="Int")>  _
	Public Property ShippingAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._ShippingAddressID
		End Get
		Set
			If (Me._ShippingAddressID.Equals(value) = false) Then
				Me._ShippingAddressID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingAddressID", DbType:="Int")>  _
	Public Property BillingAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._BillingAddressID
		End Get
		Set
			If (Me._BillingAddressID.Equals(value) = false) Then
				Me._BillingAddressID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderGUID", DbType:="NVarChar(50)")>  _
	Public Property OrderGUID() As String
		Get
			Return Me._OrderGUID
		End Get
		Set
			If (String.Equals(Me._OrderGUID, value) = false) Then
				Me._OrderGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderStatusID", DbType:="Int")>  _
	Public Property OrderStatusID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderStatusID
		End Get
		Set
			If (Me._OrderStatusID.Equals(value) = false) Then
				Me._OrderStatusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me._PortalID = value
			End If
		End Set
	End Property
End Class

Partial Public Class SNR_DENTON_ADDRESSBOOK_SEARCHResult
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of Long)
	
	Private _PortalID As Integer
	
	Private _ContactName As String
	
	Private _CompanyName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _CountryKey As Integer
	
	Private _Region As String
	
	Private _PostCode As String
	
	Private _Phone As String
	
	Private _Mobile As String
	
	Private _Email As String
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _CopyFromGlobal As System.Nullable(Of Boolean)
	
	Private _CreatedOn As Date
	
	Private _CreatedBy As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL")>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="BigInt")>  _
	Public Property UserID() As System.Nullable(Of Long)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me._PortalID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(100)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me._ContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me._CompanyName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(100)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me._Address2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryKey", DbType:="Int NOT NULL")>  _
	Public Property CountryKey() As Integer
		Get
			Return Me._CountryKey
		End Get
		Set
			If ((Me._CountryKey = value)  _
						= false) Then
				Me._CountryKey = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(100)")>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me._Region = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(20)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(20)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me._IsDeleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopyFromGlobal", DbType:="Bit")>  _
	Public Property CopyFromGlobal() As System.Nullable(Of Boolean)
		Get
			Return Me._CopyFromGlobal
		End Get
		Set
			If (Me._CopyFromGlobal.Equals(value) = false) Then
				Me._CopyFromGlobal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOn", DbType:="SmallDateTime NOT NULL")>  _
	Public Property CreatedOn() As Date
		Get
			Return Me._CreatedOn
		End Get
		Set
			If ((Me._CreatedOn = value)  _
						= false) Then
				Me._CreatedOn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="Int NOT NULL")>  _
	Public Property CreatedBy() As Integer
		Get
			Return Me._CreatedBy
		End Get
		Set
			If ((Me._CreatedBy = value)  _
						= false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
End Class
