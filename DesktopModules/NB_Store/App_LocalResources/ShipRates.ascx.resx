<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdQTY.Text">
    <value>Edit Shipping Quantity range.</value>
  </data>
  <data name="cmdPRC.Text">
    <value>Edit Shipping Price range.</value>
  </data>
  <data name="cmdWEI.Text">
    <value>Edit Shipping Weight range.</value>
  </data>
  <data name="cmdCOU.Text">
    <value>Edit Country Shipping Extra.</value>
  </data>
  <data name="cmdPRD.Text">
    <value>Edit Product Shipping.</value>
  </data>
  <data name="cmdFRE.Text">
    <value>Edit Free Shipping Level.</value>
  </data>  
  <data name="lblTitle.Text">
    <value>Shipping Administration</value>
  </data>
  <data name="dgFrom.Text">
    <value>From</value>
  </data>
  <data name="dgTo.Text">
    <value>To</value>
  </data>
  <data name="dgCost.Text">
    <value>Ship Cost</value>
  </data>
  <data name="dgDisable.Text">
    <value>Disable</value>
  </data>
  <data name="TitleQTY.Text">
    <value>Shipping Cost by Quantity</value>
  </data>
  <data name="TitlePRC.Text">
    <value>Shipping Cost by Price</value>
  </data>
  <data name="TitleWEI.Text">
    <value>Shipping Cost by Weight</value>
  </data>
  <data name="TitlePRD.Text">
    <value>Maintain Extra Shipping Cost and Weight for Product</value>
  </data>
  <data name="TitleCOU.Text">
    <value>Extra Shipping Cost for Countries</value>
  </data>
  <data name="TitleFRE.Text">
    <value>Free Shipping Level</value>
  </data>
  <data name="plCDefault.Text">
    <value>Country Default Cost</value>
  </data>
  <data name="plCDefault.Help">
    <value>Extra cost allocated to any countries not specified in the list.</value>
  </data>
  <data name="cmdAddCounty.Text">
    <value>Add Country</value>
  </data>
  <data name="plPDefault.Text">
    <value>Product Default Weight</value>
  </data>
  <data name="plPDefault.Help">
    <value>Weight allocated to any products not specified in the list.</value>
  </data>
  <data name="plRangeHelp.Text">
    <value>Country Range Help</value>
  </data>
  <data name="plRangeHelp.Help">
    <value>The Range fields on the country table allow you to specify which shipping costs should be applied based on the WEIGHT of the products.</value>
  </data>
  <data name="cmdNew.Text">
    <value>Add New</value>
  </data>
  <data name="plFreeShip.Text">
    <value>Free Shipping Level</value>
  </data>
  <data name="plFreeShip.Help">
    <value>When and order total is more than this amount Free shipping will be offered, regardless of all other shipping settings.</value>
  </data>
  <data name="cmdSearch.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="dgWeight.Text">
    <value>Weight</value>
  </data>  
  <data name="lblShipMethod.Text">
    <value>Shipping Method : </value>
  </data>
    <data name="plFreeShipList.Text">
        <value>Allowed Country Code List</value>
    </data>
    <data name="plFreeShipList.Help">
        <value>CSV List of country codes where Free Shipping will be applied, if emtpy then free shipping will apply to all countries. (e.g.  "FR,UK,IT")</value>
    </data>
  <data name="dgBox.Text">
    <value>Box %</value>
  </data>
  <data name="dgBoxCost.Text">
    <value>Box Cost</value>
  </data>
</root>